const express = require('express');
const { createServer } = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
app.use(cors());

const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: ["https://socked-front.vercel.app", "http://localhost:5173", "http://localhost:5174"],
    methods: ["GET", "POST"]
  }
});

const rooms = {};

io.on('connection', (socket) => {
  const { roomId, username, isAdmin } = socket.handshake.query;
  console.log('\n=== ะะพะฒะพะต ะฟะพะดะบะปััะตะฝะธะต ===');
  console.log('Socket ID:', socket.id);
  console.log('Room ID:', roomId);
  console.log('Username:', username);
  console.log('Is Admin:', isAdmin);

  if (!roomId || !username) {
    console.log('โ ะัะบะปััะตะฝะธะต: ะพััััััะฒััั roomId ะธะปะธ username');
    socket.disconnect();
    return;
  }

  // ะะพะดะบะปััะตะฝะธะต ะบ ะบะพะผะฝะฐัะต
  socket.join(roomId);
  console.log(`โ ะะพะปัะทะพะฒะฐัะตะปั ${username} ะฟัะธัะพะตะดะธะฝะธะปัั ะบ ะบะพะผะฝะฐัะต ${roomId}`);
  
  // ะะฝะธัะธะฐะปะธะทะฐัะธั ะบะพะผะฝะฐัั, ะตัะปะธ ะพะฝะฐ ะฝะต ัััะตััะฒัะตั
  if (!rooms[roomId]) {
    console.log(`๐ ะกะพะทะดะฐะฝะธะต ะฝะพะฒะพะน ะบะพะผะฝะฐัั: ${roomId}`);
    rooms[roomId] = {
      users: [],
      messages: []
    };
  }

  // ะกะพะทะดะฐะตะผ ะพะฑัะตะบั ะฟะพะปัะทะพะฒะฐัะตะปั
  const user = {
    id: socket.id,
    username: username,
    isAdmin: isAdmin === 'true',
    isHost: rooms[roomId].host === username,
    isModerator: false
  };

  // ะะพะฑะฐะฒะปะตะฝะธะต ะฟะพะปัะทะพะฒะฐัะตะปั ะฒ ะบะพะผะฝะฐัั
  rooms[roomId].users.push(user);
  console.log(`๐ฅ ะะพะปัะทะพะฒะฐัะตะปะธ ะฒ ะบะพะผะฝะฐัะต ${roomId}:`, rooms[roomId].users.map(u => u.username));

  // ะัะปะธ ััะพ ัะพัั, ัะพััะฐะฝัะตะผ ะตะณะพ
  if (user.isHost) {
    rooms[roomId].host = username;
    console.log(`๐ ะฃััะฐะฝะพะฒะปะตะฝ ัะพัั ะบะพะผะฝะฐัั: ${username}`);
  }

  // ะัะฟัะฐะฒะบะฐ ะธะฝัะพัะผะฐัะธะธ ะพ ะฟะพะดะบะปััะตะฝะธะธ
  io.to(roomId).emit('userJoined', {
    username: user.username,
    isAdmin: user.isAdmin,
    isHost: user.isHost,
    isModerator: user.isModerator
  });
  console.log('๐ข ะัะฟัะฐะฒะปะตะฝะพ ัะฒะตะดะพะผะปะตะฝะธะต ะพ ะฟะพะดะบะปััะตะฝะธะธ ะฟะพะปัะทะพะฒะฐัะตะปั');

  // ะัะฟัะฐะฒะบะฐ ะธััะพัะธะธ ัะพะพะฑัะตะฝะธะน ะฝะพะฒะพะผั ะฟะพะปัะทะพะฒะฐัะตะปั
  socket.emit('messageHistory', rooms[roomId].messages);
  console.log(`๐ ะัะฟัะฐะฒะปะตะฝะฐ ะธััะพัะธั ัะพะพะฑัะตะฝะธะน (${rooms[roomId].messages.length} ัะพะพะฑัะตะฝะธะน)`);

  // ะะฑัะฐะฑะพัะบะฐ ะฝะพะฒัั ัะพะพะฑัะตะฝะธะน
  socket.on('chat message', (message) => {
    console.log('\n=== ะะพะฒะพะต ัะพะพะฑัะตะฝะธะต ===');
    console.log('ะั:', message.sender);
    console.log('ะขะตะบัั:', message.text);
    console.log('ะขะพะบะตะฝั:', message.tokens);

    const newMessage = {
      ...message,
      id: Date.now().toString(),
      timestamp: new Date(),
      isHost: user.isHost || false,
      isModerator: user.isModerator || false
    };

    rooms[roomId].messages.push(newMessage);
    console.log(`๐ฌ ะกะพะพะฑัะตะฝะธะต ะดะพะฑะฐะฒะปะตะฝะพ ะฒ ะธััะพัะธั ะบะพะผะฝะฐัั ${roomId}`);
    
    io.to(roomId).emit('chat message', newMessage);
    console.log('๐ข ะกะพะพะฑัะตะฝะธะต ะพัะฟัะฐะฒะปะตะฝะพ ะฒัะตะผ ะฟะพะปัะทะพะฒะฐัะตะปัะผ ะฒ ะบะพะผะฝะฐัะต');
  });

  // ะะฑัะฐะฑะพัะบะฐ WebRTC ัะธะณะฝะฐะปะพะฒ
  socket.on('offer', (offer) => {
    console.log('๐ก ะะพะปััะตะฝ WebRTC offer');
    socket.to(roomId).emit('offer', offer);
    console.log('๐ก WebRTC offer ะฟะตัะตัะปะฐะฝ');
  });

  socket.on('answer', (answer) => {
    console.log('๐ก ะะพะปััะตะฝ WebRTC answer');
    socket.to(roomId).emit('answer', answer);
    console.log('๐ก WebRTC answer ะฟะตัะตัะปะฐะฝ');
  });

  socket.on('ice-candidate', (candidate) => {
    console.log('๐ก ะะพะปััะตะฝ ICE candidate');
    socket.to(roomId).emit('ice-candidate', candidate);
    console.log('๐ก ICE candidate ะฟะตัะตัะปะฐะฝ');
  });

  // ะะฑัะฐะฑะพัะบะฐ ะพัะบะปััะตะฝะธั
  socket.on('disconnect', () => {
    console.log('\n=== ะัะบะปััะตะฝะธะต ะฟะพะปัะทะพะฒะฐัะตะปั ===');
    console.log('Socket ID:', socket.id);
    console.log('Username:', username);
    
    if (rooms[roomId]) {
      rooms[roomId].users = rooms[roomId].users.filter(
        user => user.id !== socket.id
      );
      console.log(`๐ฅ ะะพะปัะทะพะฒะฐัะตะปั ัะดะฐะปะตะฝ ะธะท ะบะพะผะฝะฐัั ${roomId}`);

      // ะัะปะธ ะพัะบะปััะธะปัั ัะพัั, ะพัะธัะฐะตะผ ะตะณะพ
      if (rooms[roomId].host === username) {
        rooms[roomId].host = undefined;
        console.log('๐ ะฅะพัั ะบะพะผะฝะฐัั ัะดะฐะปะตะฝ');
      }

      // ะัะฟัะฐะฒะปัะตะผ ะธะฝัะพัะผะฐัะธั ะพะฑ ะพัะบะปััะตะฝะธะธ
      io.to(roomId).emit('userLeft', {
        username: username,
        isAdmin: isAdmin === 'true',
        isHost: user.isHost
      });
      console.log('๐ข ะัะฟัะฐะฒะปะตะฝะพ ัะฒะตะดะพะผะปะตะฝะธะต ะพะฑ ะพัะบะปััะตะฝะธะธ ะฟะพะปัะทะพะฒะฐัะตะปั');
    }
  });
});

const PORT = process.env.PORT || 3001;
httpServer.listen(PORT, () => {
  console.log(`\n๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log('๐ก WebSocket ัะตัะฒะตั ะณะพัะพะฒ ะบ ะฟะพะดะบะปััะตะฝะธัะผ');
}); 