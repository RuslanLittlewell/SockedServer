import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';

const app = express();
app.use(cors());

const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: ["http://localhost:5173", "http://localhost:5174"],
    methods: ["GET", "POST"]
  }
});

interface Room {
  users: User[];
  messages: Message[];
  host?: string;
}

interface User {
  id: string;
  username: string;
  isAdmin?: boolean;
  isHost?: boolean;
  isModerator?: boolean;
}

interface Message {
  id: string;
  text: string;
  sender: string;
  timestamp: Date;
  isHost: boolean;
  isModerator: boolean;
  tokens: number;
}

const rooms: { [key: string]: Room } = {};

io.on('connection', (socket) => {
  const { roomId, username, isAdmin } = socket.handshake.query;
  console.log('\n=== –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===');
  console.log('Socket ID:', socket.id);
  console.log('Room ID:', roomId);
  console.log('Username:', username);
  console.log('Is Admin:', isAdmin);

  if (!roomId || !username) {
    console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç roomId –∏–ª–∏ username');
    socket.disconnect();
    return;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.join(roomId as string);
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!rooms[roomId as string]) {
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
    rooms[roomId as string] = {
      users: [],
      messages: []
    };
  }

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user: User = {
    id: socket.id,
    username: username as string,
    isAdmin: isAdmin === 'true',
    isHost: rooms[roomId as string].host === username,
    isModerator: false
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
  rooms[roomId as string].users.push(user);
  console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, rooms[roomId as string].users.map(u => u.username));

  // –ï—Å–ª–∏ —ç—Ç–æ —Ö–æ—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
  if (user.isHost) {
    rooms[roomId as string].host = username as string;
    console.log(`üëë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ö–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã: ${username}`);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  io.to(roomId as string).emit('userJoined', {
    username: user.username,
    isAdmin: user.isAdmin,
    isHost: user.isHost,
    isModerator: user.isModerator
  });
  console.log('üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  socket.emit('messageHistory', rooms[roomId as string].messages);
  console.log(`üìú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (${rooms[roomId as string].messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  socket.on('chat message', (message: Omit<Message, 'id' | 'timestamp' | 'isHost' | 'isModerator'>) => {
    console.log('\n=== –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===');
    console.log('–û—Ç:', message.sender);
    console.log('–¢–µ–∫—Å—Ç:', message.text);
    console.log('–¢–æ–∫–µ–Ω—ã:', message.tokens);

    const newMessage: Message = {
      ...message,
      id: Date.now().toString(),
      timestamp: new Date(),
      isHost: user.isHost || false,
      isModerator: user.isModerator || false
    };

    rooms[roomId as string].messages.push(newMessage);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
    
    io.to(roomId as string).emit('chat message', newMessage);
    console.log('üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
  socket.on('offer', (offer) => {
    console.log('üì° –ü–æ–ª—É—á–µ–Ω WebRTC offer');
    socket.to(roomId as string).emit('offer', offer);
    console.log('üì° WebRTC offer –ø–µ—Ä–µ—Å–ª–∞–Ω');
  });

  socket.on('answer', (answer) => {
    console.log('üì° –ü–æ–ª—É—á–µ–Ω WebRTC answer');
    socket.to(roomId as string).emit('answer', answer);
    console.log('üì° WebRTC answer –ø–µ—Ä–µ—Å–ª–∞–Ω');
  });

  socket.on('ice-candidate', (candidate) => {
    console.log('üì° –ü–æ–ª—É—á–µ–Ω ICE candidate');
    socket.to(roomId as string).emit('ice-candidate', candidate);
    console.log('üì° ICE candidate –ø–µ—Ä–µ—Å–ª–∞–Ω');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('\n=== –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===');
    console.log('Socket ID:', socket.id);
    console.log('Username:', username);
    
    if (rooms[roomId as string]) {
      rooms[roomId as string].users = rooms[roomId as string].users.filter(
        user => user.id !== socket.id
      );
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);

      // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Ö–æ—Å—Ç, –æ—á–∏—â–∞–µ–º –µ–≥–æ
      if (rooms[roomId as string].host === username) {
        rooms[roomId as string].host = undefined;
        console.log('üëë –•–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã —É–¥–∞–ª–µ–Ω');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      io.to(roomId as string).emit('userLeft', {
        username: username,
        isAdmin: isAdmin === 'true',
        isHost: user.isHost
      });
      console.log('üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  });
});

const PORT = process.env.PORT || 3001;
httpServer.listen(PORT, () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üì° WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º');
}); 